# üìÑ backend/routers/organizations.py

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from database import get_db

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ä–æ–ª—è–º (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç User —Å –ø–æ–ª—è–º–∏ id, role_names –∏ —Ç.–ø.)
from dependencies.auth import get_current_user_with_roles

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π (–∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ ¬´organizations.py¬ª)
from models.organizations import Organization, OrganizationMember

# –°—Ö–µ–º—ã Pydantic –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
from schemas.organization import (
    OrganizationCreate,
    OrganizationRead,
    OrganizationMemberInvite,
    OrganizationMemberRead,
)

from utils.ulid_generator import generate_ulid
from datetime import datetime

router = APIRouter(prefix="/organizations", tags=["organizations"])


@router.get("/my", response_model=OrganizationRead)
def get_my_organization(
    user=Depends(get_current_user_with_roles),
    db: Session = Depends(get_db),
):
    member = db.query(OrganizationMember).filter_by(user_id=user.id).first()
    if not member:
        raise HTTPException(status_code=404, detail="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    org = db.query(Organization).filter_by(id=member.org_id).first()
    return org


@router.post("/", response_model=OrganizationRead)
def create_organization(
    payload: OrganizationCreate,
    user=Depends(get_current_user_with_roles),
    db: Session = Depends(get_db),
):
    if not any(r in ("admin", "manager") for r in user.role_names):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")

    org = Organization(
        id=generate_ulid(),
        name=payload.name,
        org_type=payload.org_type,
        inn=payload.inn,
        location=payload.location,
        email=payload.email,
        created_by=user.id,
        updated_by=user.id,
    )
    db.add(org)
    db.commit()
    db.refresh(org)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    member = OrganizationMember(
        id=generate_ulid(),
        org_id=org.id,
        user_id=user.id,
        employee_status_id=None,
        created_by=user.id,
        updated_by=user.id,
    )
    db.add(member)
    db.commit()
    return org


@router.post("/invite", response_model=OrganizationMemberRead)
def invite_member(
    payload: OrganizationMemberInvite,
    user=Depends(get_current_user_with_roles),
    db: Session = Depends(get_db),
):
    if not any(r in ("admin", "manager") for r in user.role_names):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")

    # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫
    member = db.query(OrganizationMember).filter_by(user_id=user.id).first()
    if not member:
        raise HTTPException(status_code=400, detail="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")

    new_member = OrganizationMember(
        id=generate_ulid(),
        org_id=member.org_id,
        user_id=payload.user_id,
        employee_status_id=None,
        created_by=user.id,
        updated_by=user.id,
    )
    db.add(new_member)
    db.commit()
    db.refresh(new_member)
    return new_member
